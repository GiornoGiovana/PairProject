import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.LinkedList;


public class Player extends GameObject{

	private float width = 32, height = 64;

	private float gravity = .6f;

	private final float MAX_SPEED = 10;

	private Handler handler;
	
	Texture texture = Game.getInstance();
	
	private Animation playerWalk;
	

	public Player(float x, float y, Handler handler,  ObjectId id){
		super(x, y, id);
		this.handler = handler;
		playerWalk = new Animation(5, texture.player[2],texture.player[3]);
	}

	public void tick(LinkedList<GameObject> object) {
		// TODO Auto-generated method stub
		x += velX;
		y += velY;
		if(falling || jumping){
			velY += gravity;
			if(velY > MAX_SPEED){
				velY = MAX_SPEED;
			}
		}
		Collision(object);
		playerWalk.run();
	}

	private void Collision(LinkedList<GameObject>object){
		for(int c = 0; c< handler.object.size(); c++){
			GameObject tempObject = handler.object.get(c);
			if(tempObject.getId() == ObjectId.Block){
				if(getBoundsTop().intersects(tempObject.getBounds())){
					y = tempObject.getY() + 32;
					velY = 0;
				}
				else{
					falling = true;

				}
				if(getBounds().intersects(tempObject.getBounds())){
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
				}
				else{
					falling = true;

				}
				if(getBoundsRight().intersects(tempObject.getBounds())){
					x = (float) (tempObject.getX() - tempObject.getBounds().getWidth());
					falling = false;
					jumping = false;

				}
				if(getBoundsLeft().intersects(tempObject.getBounds())){
					x = (float) (tempObject.getX() + tempObject.getBounds().getWidth());
					falling = false;
					jumping = false;
				}
			}
		}
	}

	public void render(Graphics g) {
		// TODO Auto-generated method stub
		g.setColor(Color.blue);
		if(velX !=0){
			playerWalk.drawAnimation(g, (int)x, (int)y);
		}
		else{
			g.drawImage(texture.player[0], (int)x, (int)y,(int) width, (int) height ,null);
		}
		//g.drawImage(texture.player[0], (int)x, (int)y,(int) width, (int) height ,null);
		//g.fillRect((int)x, (int) y,(int) width, (int) height);
		
	}
	public Rectangle getBounds() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x+(width/2) - (width/4)), (int) ((int)y + (height/2)), (int)width/2, (int) height/2);
	}
	public Rectangle getBoundsTop() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x + (width/2) - ((width/4))), (int) y,(int) width/2, (int) height/2);
	}
	public Rectangle getBoundsRight() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x+width-5) , (int) y+5,(int)5, (int) height-10);
	}
	public Rectangle getBoundsLeft() {
		// TODO Auto-generated method stub
		return new Rectangle ((int)x, (int) y + 5,(int) 5, (int) height-10);
	}
}

import java.awt.*;
import java.awt.geom.Line2D;
import java.util.LinkedList;


public class Player extends GameObject{

	private float width = 32, height = 64;

	private float gravity = .8f;

	private final float MAX_SPEED = 10;
	private int facing = 1;
	private Handler handler;
	private boolean death = false; //when true player goes back to original position
	Texture texture = Game.getInstance();
	private Animation playerRight, playerLeft;
	private float DeathX, DeathY;
	private Camera cam;

	public Player(float x, float y, Handler handler, Camera cam, ObjectId id){
		super(x, y, id);
		DeathX = this.x;
		DeathY = this.y;
		this.handler = handler;
		playerRight = new Animation(5,texture.player[1], texture.player[2],texture.player[3]);
		playerLeft = new Animation(5, texture.rplayer[1], texture.rplayer[2], texture.rplayer[3]);
	}

	public void tick(LinkedList<GameObject> object) {
		// TODO Auto-generated method stub
		x += velX;
		y += velY;
		if(falling || jumping){
			velY += gravity;
			if(velY > MAX_SPEED){
				velY = MAX_SPEED;
			}
		}
		Collision(object);
		playerRight.run();
		playerLeft.run();
	}

	private void Collision(LinkedList<GameObject>object){
		for(int c = 0; c< handler.object.size(); c++){
			GameObject tempObject = handler.object.get(c);
			if(tempObject.getId() == ObjectId.Block){
				if(getBoundsTop().intersects(tempObject.getBounds())){
					y = tempObject.getY() + 32;
					velY = 0;
				}
				else{
					falling = true;

				}
				if(getBounds().intersects(tempObject.getBounds())){
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
				}
				else{
					falling = true;

				}
				if(getBoundsRight().intersects(tempObject.getBounds())){
					x = (float) (tempObject.getX() - tempObject.getBounds().getWidth());
					falling = false;
					jumping = false;

				}
				if(getBoundsLeft().intersects(tempObject.getBounds())){
					x = (float) (tempObject.getX() + tempObject.getBounds().getWidth());
					falling = false;
					jumping = false;
				}
			}
			else if(tempObject.getId() == ObjectId.Finish){
				if(getBounds().intersects(tempObject.getBounds())){
					handler.clearLevel();
					cam = new Camera(0,0);
				}
			}
			if(tempObject.getId() == ObjectId.Spike){
				int[] xpoints = tempObject.getPolyBounds().xpoints;
				int[] ypoints = tempObject.getPolyBounds().ypoints;
				Line2D l1 = new Line2D.Float(xpoints[0], ypoints[0], xpoints[1], ypoints[1]);
				Line2D l2 = new Line2D.Float(xpoints[1], ypoints[1], xpoints[2], ypoints[2]);
				Line2D l3 = new Line2D.Float(xpoints[2], ypoints[2], xpoints[0], ypoints[0]);
				if(getBounds().intersectsLine(l1)){
					falling = false;
					jumping = false;
					death = true;
					
				}
				if(getBounds().intersectsLine(l2)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBounds().intersectsLine(l3)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsTop().intersectsLine(l1)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsTop().intersectsLine(l2)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsTop().intersectsLine(l3)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsLeft().intersectsLine(l1)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsLeft().intersectsLine(l2)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsLeft().intersectsLine(l3)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsRight().intersectsLine(l1)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsRight().intersectsLine(l2)){
					falling = false;
					jumping = false;
					death = true;
				}
				if(getBoundsRight().intersectsLine(l3)){
					falling = false;
					jumping = false;
					death = true;
				}

			}
		}
	}

	public void render(Graphics g) {
		// TODO Auto-generated method stub
		g.setColor(Color.blue);
		if(death){
			x = DeathX;
			y = DeathY;
			g.drawImage(texture.player[0],(int)x,(int)y,(int)32,(int)64,null);
			death = false;
		}
		if(jumping){
			if(velX >= 0){
				g.drawImage(texture.player[4],(int)x,(int)y, (int)32, (int)64, null);
			}
			else{
				facing = 0;
				g.drawImage(texture.rplayer[4],(int)x,(int)y,(int)32,(int)64,null);
			}
		}
		else{
			if (velX !=0){
				if(velX > 0){
					facing = 1;
					playerRight.drawAnimation(g, (int)x, (int)y);
				}
				else{
					facing = 0;
					playerLeft.drawAnimation(g, (int)x, (int)y);

				}
			}
			if(velX == 0){
				if(facing == 1){
					g.drawImage(texture.player[0],(int)x,(int)y, (int)32, (int)64, null);
				}
				else{
					g.drawImage(texture.rplayer[0],(int)x,(int)y, (int)32, (int)64, null);
				}
			}
		}
		//g.drawImage(texture.player[0], (int)x, (int)y,(int) width, (int) height ,null);
		//g.fillRect((int)x, (int) y,(int) width, (int) height);

	}
	public Rectangle getBounds() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x+(width/2) - (width/4)), (int) ((int)y + (height/2)), (int)width/2, (int) height/2);
	}
	public Rectangle getBoundsTop() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x + (width/2) - ((width/4))), (int) y,(int) width/2, (int) height/2);
	}
	public Rectangle getBoundsRight() {
		// TODO Auto-generated method stub
		return new Rectangle ((int) ((int)x+width-5) , (int) y+5,(int)5, (int) height-10);
	}
	public Rectangle getBoundsLeft() {
		// TODO Auto-generated method stub
		return new Rectangle ((int)x, (int) y + 5,(int) 5, (int) height-10);
	}

	@Override
	public Polygon getPolyBounds() {
		// TODO Auto-generated method stub
		return null;
	}

}
